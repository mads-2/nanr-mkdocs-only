{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nonadiabatic Nanoreactor Use Guide","text":"<p>Last updated: October 2025 Primary Branch: <code>major</code> (used by Pierilab in the Martinezlab repo)</p> <p>This page is an evolving \u201cBest Use Guide\u201d for beginners \u2014 please update it whenever YAML formatting or workflow structures change.</p>"},{"location":"#important-external-info","title":"Important External Info","text":"<ul> <li>GitHub: Nonadiabatic Nanoreactor \u2013 major branch</li> <li>Paper: Chemical Science (2021)</li> </ul>"},{"location":"#the-science-behind-nanr","title":"The Science behind NANR","text":"<p>The NANR explores photochemical reactivity by combining metadynamics and seam constraints to locate conical intersections efficiently.</p>"},{"location":"#the-environment","title":"The Environment","text":"<p>\u2757 Make sure to <code>conda activate nanr</code> before running.</p>"},{"location":"#recommended-directory-structure","title":"Recommended Directory Structure","text":""},{"location":"#recommended-directory-structure_1","title":"\ud83e\udde9 Recommended Directory Structure","text":"<p>```bash / \u251c\u2500\u2500 seam_sampling/ \u2502   \u251c\u2500\u2500 molecule.xyz \u2502   \u251c\u2500\u2500 seam_sampling.yaml \u2502   \u251c\u2500\u2500 seam_traj.xyz \u2502   \u2514\u2500\u2500 clustering/ \u2502       \u251c\u2500\u2500 full_geom_seam.xyz \u2502       \u251c\u2500\u2500 clustering.yaml \u2502       \u251c\u2500\u2500 ciopt0/ \u2502       \u2502   \u251c\u2500\u2500 centroid0.xyz \u2502       \u2502   \u251c\u2500\u2500 tc.in \u2502       \u2502   \u251c\u2500\u2500 submit.sh \u2502       \u2502   \u2514\u2500\u2500 cone_sampling/ \u2502       \u2502       \u251c\u2500\u2500 ci0.xyz \u2502       \u2502       \u251c\u2500\u2500 sampling.yaml \u2502       \u2502       \u251c\u2500\u2500 ci0_radial_XXXX.xyz \u2502       \u2502       \u2514\u2500\u2500 O0/ \u2502       \u2502           \u251c\u2500\u2500 opt.in \u2502       \u2502           \u251c\u2500\u2500 submit.sh \u2502       \u2502           \u2514\u2500\u2500 scr.start/optim.xyz \u2514\u2500\u2500 logs/, figures/, or results/ (optional)"},{"location":"1_seam_sampling/","title":"\ud83d\udd0d Seam Sampling","text":"<p>\ud83d\udcd6 In the Seam Sampling step, NANR explores the intersection seam \u2014 the region of energetic degeneracy between two electronic states (e.g., S\u2080/S\u2081 or S\u2081/S\u2082) \u2014 using metadynamics with a seam constraint that penalizes large energy gaps.</p>"},{"location":"1_seam_sampling/#concept-overview","title":"Concept Overview","text":"<ul> <li>NANR uses RMSD-based collective variables (CVs) to drive the system along the seam.  </li> <li>Periodic Gaussian bias potentials are added to discourage revisiting previous configurations.  </li> <li>The seam constraint switches between linear and harmonic forms depending on the instantaneous energy gap, keeping the system near degeneracy.  </li> <li>The resulting trajectory of geometries provides a map of the accessible conical intersection seam, which will later feed into clustering and MECI optimization.</li> </ul>"},{"location":"1_seam_sampling/#step-by-step-seam-sampling","title":"Step-By-Step Seam Sampling","text":"<ol> <li> <p>Create a working directory <pre><code>mkdir &lt;molecule&gt;/seam_sampling\n</code></pre></p> </li> <li> <p>Add starting structure and optional orbitals</p> </li> <li>Place your starting geometry (e.g., FC point or MECI):      <pre><code>&lt;molecule&gt;/seam_sampling/molecule.xyz\n</code></pre></li> <li> <p>Optionally include orbital guesses:      <pre><code>&lt;molecule&gt;/seam_sampling/c0\n&lt;molecule&gt;/seam_sampling/c0.casscf\n</code></pre></p> </li> <li> <p>Create <code>seam_sampling.yaml</code> <pre><code>filenames:\n  geom_xyz: molecule.xyz             # starting xyz file\n  output_dir: /&lt;molecule&gt;/seam_sampling\n  trajectory: seam_traj.xyz          # output trajectory\n\nengine:\n  type: terachem\n  gpus: 0\n  cwd: .\n  hhtda: False\n  options:\n    method: rhf\n    basis: 6-31gs\n    precision: mixed\n    scf: diis+a\n    casci: 'yes'\n    fon: 'yes'\n    fon_temperature: 0.15\n    closed: 21\n    active: 4\n    cassinglets: 4\n    castarget: 2\n    castargetmult: 1\n    charge: 0\n    cphfiter: 1000\n    maxit: 1000\n\ndynamics:\n  isc: \"no\"\n  nsteps: 100000\n  T0: 300\n  gamma: 0.001\n  timestep: 1.0\n  constraint_theta: 0.01\n  constraint_coeff: 10\n  sample_fraction: 1\n  sample_threshold: 0.01\n  lower_state: 2\n  upper_state: 3\n  meta: True\n  meta_tau: 25\n  meta_alpha: 0.002\n  meta_gamma: 1.5\n  meta_maxE: 1.0\n</code></pre></p> </li> <li> <p>Create a submission script <code>submit.sh</code> <pre><code>#!/bin/bash\n#SBATCH -p l40-gpu\n#SBATCH -N 1\n#SBATCH -n 4\n#SBATCH -J seam\n#SBATCH --mem=75G\n#SBATCH -t 5-00:00:00\n#SBATCH --qos gpu_access\n#SBATCH --gres=gpu:1\n\nmodule load tc/25.03\npython3 /&lt;path&gt;/NonadiabaticNanoreactor/nanr/seam_traj.py seam_sampling.yaml\n</code></pre></p> </li> <li> <p>Submit your seam-sampling job <pre><code>cd &lt;molecule&gt;/seam_sampling\nsbatch submit.sh\n</code></pre></p> </li> </ol>"},{"location":"1_seam_sampling/#outputs","title":"Outputs","text":"<ul> <li><code>seam_traj.xyz</code> \u2192 full metadynamics trajectory  </li> <li><code>full_geom_seam.xyz</code> \u2192 all collected geometries for clustering  </li> <li><code>log/</code> (optional) \u2192 runtime logs and energy tracking  </li> </ul> <p>Continue to \ud83c\udf0c Clustering \u2192</p>"},{"location":"2_clustering/","title":"\ud83c\udf0c Clustering","text":"<p>\ud83d\udcd6 In the Clustering step, NANR organizes the large set of geometries collected during seam sampling into groups (clusters) that represent distinct regions of the intersection seam. Each cluster's centroid becomes a starting point for a MECI optimization.</p>"},{"location":"2_clustering/#concept-overview","title":"Concept Overview","text":"<ul> <li>Each geometry is aligned and compared using rotational and atomic label permutations to account for molecular symmetry.</li> <li>The algorithm applies a clustering method (typically k-means, though DBSCAN and others are supported) based on Euclidean distance between geometries.</li> <li>The elbow method determines the optimal number of clusters.</li> <li>The centroid of each cluster serves as a starting geometry for a MECI optimization.</li> <li>This step reduces redundancy and captures distinct structural regions along the sampled seam.</li> </ul>"},{"location":"2_clustering/#step-by-step-clustering","title":"Step-By-Step Clustering","text":"<ol> <li> <p>Create a clustering directory <pre><code>mkdir &lt;molecule&gt;/seam_sampling/clustering\n</code></pre></p> </li> <li> <p>Copy your seam trajectory <pre><code>cp ../full_geom_seam.xyz .\n</code></pre></p> </li> <li> <p>Create <code>clustering.yaml</code> <pre><code>filenames:\n  xyz_file: full_geom_seam.xyz     # starting xyz file\n  directory_name: /&lt;molecule&gt;/seam_sampling/clustering/\n  num_atoms: 16                    # total number of atoms\n\ncluster_settings:\n  cluster_method: kmeans           # can be: kmeans, dbscan, meanshift, affinity_propagation\n  k: None                          # None = use elbow method\n  ms_bandwidth: None               # bandwidth parameter for Mean Shift\n  ap_damping: 0.5                  # damping for Affinity Propagation\n  ap_pref_multipler: 1.0           # exemplar multiplier for Affinity Propagation\n  dbscan_min: 5                    # minimum samples for DBSCAN\n  dbscan_eps: 0.5                  # distance threshold for DBSCAN\n  mass_weighted: False\n  ignore_H: True                   # ignore hydrogens to speed up clustering\n  diverse_sampling: False\n  b: 1                             # number of diverse pairs (kmeans/meanshift only)\n  outfile: clustered.xyz           # output file (optional)\n\nplot_settings:\n  type: PCA                        # default PCA projection for visualization\n  components: 2\n</code></pre></p> </li> <li> <p>Create <code>submit.sh</code> <pre><code>#!/bin/bash\n#SBATCH -p l40-gpu\n#SBATCH -N 1\n#SBATCH -n 4\n#SBATCH -J cluster\n#SBATCH --mem=50G\n#SBATCH -t 10:00:00\n#SBATCH --qos gpu_access\n#SBATCH --gres=gpu:1\n\nmodule load tc/25.03\npython3 /&lt;path&gt;/NonadiabaticNanoreactor/clustering/clusterer.py clustering.yaml\n</code></pre></p> </li> <li> <p>Submit your clustering job <pre><code>cd &lt;molecule&gt;/seam_sampling/clustering\nsbatch submit.sh\n</code></pre></p> </li> </ol>"},{"location":"2_clustering/#outputs","title":"Outputs","text":"<ul> <li><code>clustered.xyz</code> \u2192 optional file containing combined cluster outputs  </li> <li><code>centroid#.xyz</code> \u2192 representative centroid structures  </li> <li><code>log/</code> \u2192 job output logs and runtime information  </li> </ul> <p>Continue to \u23f3 MECI Optimization \u2192</p>"},{"location":"3_meci_optimization/","title":"\u23f3 MECI Optimization","text":"<p>\ud83d\udcd6 In the MECI Optimization step, each cluster\u2019s centroid from the previous stage is refined to locate a Minimum Energy Conical Intersection (MECI) using multireference electronic structure methods such as CASSCF, FOMO-CASCI, or hhTDA.</p>"},{"location":"3_meci_optimization/#concept-overview","title":"Concept Overview","text":"<ul> <li>Each cluster\u2019s centroid geometry serves as an initial guess for MECI optimization.</li> <li>MECI searches refine the geometry to the point of degeneracy between two electronic states with identical multiplicity.</li> <li>The resulting optimized MECIs represent key regions of the intersection seam and are used as inputs for cone sampling.</li> <li>These structures help map the accessible parts of the conical intersection space.</li> </ul>"},{"location":"3_meci_optimization/#step-by-step-meci-optimization","title":"Step-By-Step MECI Optimization","text":"<ol> <li> <p>Create directories for each centroid <pre><code>mkdir ciopt0 ciopt1 ciopt2 ...\n</code></pre></p> </li> <li> <p>Move each centroid into its directory <pre><code>mv centroid0.xyz ciopt0/\nmv centroid1.xyz ciopt1/\n</code></pre></p> </li> <li> <p>Create the TeraChem input file <code>tc.in</code> <pre><code>basis 6-31gs\ncharge 0\nspinmult 1\nmethod rhf\nprecision mixed\nscf diis+a\nclosed 20\nactive 5\ncasscf yes\nspinmult 1\ncassinglets 4\ncastarget 0\ncastargetmult 1\nprecision mixed\ncoordinates centroid0.xyz\nrun ciopt\nnacstate1 2\nnacstate2 3\ncasguess c0.casscf\ncasscftrustmaxiter 1000\ncasscfmaxiter 1000\ncasscforbnriter 1000\ncpsacasscfmaxiter 1000\ncphfiter 1000\nend\n</code></pre></p> </li> <li> <p>Add orbital guess files if applicable <pre><code>&lt;molecule&gt;/seam_sampling/clustering/ciopt0/c0\n&lt;molecule&gt;/seam_sampling/clustering/ciopt0/c0.casscf\n</code></pre></p> </li> <li> <p>Create <code>submit.sh</code> for each MECI optimization <pre><code>#!/bin/bash\n#SBATCH -p l40-gpu\n#SBATCH -N 1\n#SBATCH -n 4\n#SBATCH -J centroid0\n#SBATCH --mem=50G\n#SBATCH -t 30:00:00\n#SBATCH --qos gpu_access\n#SBATCH --gres=gpu:1\n\nmodule load tc/25.03\nterachem tc.in &gt; tc.out\n</code></pre></p> </li> <li> <p>Submit jobs for all centroids <pre><code>sbatch submit.sh\n</code></pre></p> </li> </ol>"},{"location":"3_meci_optimization/#outputs","title":"Outputs","text":"<ul> <li><code>scr.centroid#/optim.xyz</code> \u2192 optimized MECI geometry  </li> <li><code>tc.out</code> \u2192 full TeraChem output log  </li> <li>These MECIs are used as input structures for Cone Sampling.</li> </ul> <p>Continue to \ud83c\udf66 Cone Sampling \u2192</p>"},{"location":"4_cone_sampling/","title":"\ud83c\udf66 Cone Sampling","text":"<p>\ud83d\udcd6 In the Cone Sampling step, NANR systematically explores the branching plane around each optimized MECI to understand how different displacement directions affect photochemical outcomes.</p>"},{"location":"4_cone_sampling/#concept-overview","title":"Concept Overview","text":"<ul> <li>The branching plane is defined by two orthogonal vectors, g (gradient difference) and h (nonadiabatic coupling).  </li> <li>New geometries \u2014 cone points \u2014 are generated by displacing the MECI geometry along linear combinations of g and h.  </li> <li>Each cone point represents a possible direction for the molecule to evolve following nonadiabatic transitions.  </li> <li>These cone points serve as starting geometries for the Relaxation stage.</li> </ul>"},{"location":"4_cone_sampling/#step-by-step-cone-sampling","title":"Step-By-Step Cone Sampling","text":"<ol> <li> <p>Create <code>cone_sampling/</code> inside each MECI directory <pre><code>mkdir &lt;molecule&gt;/seam_sampling/clustering/ciopt0/cone_sampling\n</code></pre></p> </li> <li> <p>Copy in your optimized MECI geometry <pre><code>cp ../ci0.xyz cone_sampling/\n</code></pre></p> </li> <li> <p>Create <code>sampling.yaml</code> <pre><code>engine:\n  type: terachem\n  gpus: 0\n  cwd: .\n\noptions:\n  method: rhf\n  basis: 6-31gs\n  precision: mixed\n  scf: diis+a\n  casscf: 'yes'\n  closed: 20\n  active: 5\n  cassinglets: 4\n  casguess: 'c0.casscf'\n  castarget: 2\n  castargetmult: 1\n  casscftrustmaxiter: 1000\n  casscfmaxiter: 1000\n  casscforbnriter: 1000\n  cphfiter: 1000\n  cpsacasscfmaxiter: 1000\n\ncone:\n  sampling: radial\n  lower_state: 2\n  upper_state: 3\n  samples: 60\n  radii_list: [0.10]\n</code></pre></p> </li> <li> <p>Create a submission script <code>submit.sh</code> <pre><code>#!/bin/bash\n#SBATCH -p l40-gpu\n#SBATCH -N 1\n#SBATCH -n 4\n#SBATCH -J cone_sample\n#SBATCH --mem=50G\n#SBATCH -t 1:00:00\n#SBATCH --qos gpu_access\n#SBATCH --gres=gpu:1\n\nmodule load tc/25.03\npython3 /&lt;path&gt;/NonadiabaticNanoreactor/scripts/gh_sampling.py sampling.yaml\n</code></pre></p> </li> <li> <p>Submit your cone sampling job <pre><code>cd &lt;molecule&gt;/seam_sampling/clustering/ciopt0/cone_sampling\nsbatch submit.sh\n</code></pre></p> </li> </ol>"},{"location":"4_cone_sampling/#notes","title":"Notes","text":"<p>The <code>radii_list</code> keyword specifies the displacement magnitude (in \u00c5) for each cone point. Multiple values can be supplied, e.g. <code>[0.05, 0.10, 0.15]</code>.</p> <p>Ensure that your MECI optimization finished successfully before running this step.</p>"},{"location":"4_cone_sampling/#outputs","title":"Outputs","text":"<ul> <li><code>ci0_radial_XXXX.xyz</code> \u2192 individual cone-point geometries  </li> <li><code>sampling.yaml</code> \u2192 input record for reproducibility  </li> <li><code>submit.sh</code> \u2192 TeraChem submission script  </li> </ul> <p>Continue to \ud83c\udfd6\ufe0f Relaxation \u2192</p>"},{"location":"5_relaxation/","title":"\ud83c\udfd6\ufe0f Relaxation","text":"<p>\ud83d\udcd6 The Relaxation step propagates or optimizes cone point geometries on the lower electronic state to identify possible ground-state photoproducts.</p>"},{"location":"5_relaxation/#concept-overview","title":"Concept Overview","text":"<ul> <li>Each cone point generated during cone sampling is used as a starting geometry.</li> <li>NANR provides three relaxation workflows:</li> <li>Optimization only (geometry minimization)</li> <li>No initial velocity MD + optimization</li> <li>Random initial velocity MD + optimization</li> <li>These methods emulate how molecules relax after nonadiabatic transitions, revealing accessible minima on the ground-state PES.</li> </ul>"},{"location":"5_relaxation/#step-by-step-optimization-only","title":"\ud83d\udecc Step-By-Step: Optimization Only","text":"<ol> <li> <p>From each <code>cone_sampling/</code> directory, create an <code>opt.in</code> template:    <pre><code>coordinates start.xyz\nbasis 6-31gs\nspinmult 1\ncharge 0\nmethod wb97x\nrun minimize\ndftd no\npurify no\nprecision mixed\nscf diis+a\n</code></pre></p> </li> <li> <p>Modify or reuse the submission script:    <pre><code>#!/bin/bash\n#SBATCH -p l40-gpu\n#SBATCH -N 1\n#SBATCH -n 1\n#SBATCH -J opt\n#SBATCH --mem=50G\n#SBATCH -t 10:00:00\n#SBATCH --qos gpu_access\n#SBATCH --gres=gpu:1\n#SBATCH -o slurm-%j.out\n#SBATCH -e slurm-%j.err\n\nmodule load tc/25.03\nterachem opt.in &gt; opt.out\n</code></pre></p> </li> <li> <p>Prepare and run your jobs:    <pre><code>chmod +x submit.sh\nsbatch submit.sh\n</code></pre></p> </li> <li> <p>The final geometry (bottom N+2 lines of <code>optim.xyz</code>) corresponds to your optimized photoproduct.</p> </li> </ol>"},{"location":"5_relaxation/#step-by-step-no-initial-velocity-md-optimization","title":"\ud83d\udeb6\u200d\u2640\ufe0f + \ud83d\udecc Step-By-Step: No Initial Velocity MD + Optimization","text":"<ol> <li> <p>Create an <code>md.in</code> file:    <pre><code>coordinates XXX\nbasis 6-31gs\ncharge 0\nmethod wb97x\nspinmult 1\nrun md\nprecision mixed\nnstep 100\n</code></pre></p> </li> <li> <p>Launch MD and follow with optimization:    <pre><code>sbatch submit.sh\n</code></pre></p> </li> <li> <p>After the MD completes, extract the final coordinates from <code>scr.coords/coors.xyz</code>, then run optimization as above.</p> </li> </ol>"},{"location":"5_relaxation/#step-by-step-random-initial-velocity-md-optimization","title":"\ud83c\udfc3\u200d\u2640\ufe0f + \ud83d\udecc Step-By-Step: Random Initial Velocity MD + Optimization","text":"<ol> <li> <p>Generate random velocity files:    <pre><code>filenames:\n  work_path: &lt;molecule&gt;/seam_sampling/clustering/ciopt#/cone_sampling/\nvelocity_sampling:\n  samples_per_point: 5\n  added_energy: 1.8289  # in eV\n</code></pre> <pre><code>python velocity_sampling.py\n</code></pre></p> </li> <li> <p>For each velocity index (<code>V0</code>, <code>V1</code>, ...), perform MD as in the previous workflow.</p> </li> <li> <p>After MD completion, extract the last coordinates to initialize optimization directories (<code>O0/</code>, <code>O1/</code>, etc.).</p> </li> <li> <p>Submit optimization jobs for each set:    <pre><code>sbatch submit.sh\n</code></pre></p> </li> </ol>"},{"location":"5_relaxation/#outputs","title":"Outputs","text":"<ul> <li><code>opt.out</code> \u2192 TeraChem optimization log  </li> <li><code>optim.xyz</code> \u2192 converged geometry  </li> <li><code>scr.start/optim.xyz</code> \u2192 final relaxed structure  </li> </ul> <p>Each relaxed structure corresponds to a photoproduct or intermediate accessible from a particular cone point direction.</p> <p>Continue back to \ud83c\udfe0 Home \u2192</p>"}]}